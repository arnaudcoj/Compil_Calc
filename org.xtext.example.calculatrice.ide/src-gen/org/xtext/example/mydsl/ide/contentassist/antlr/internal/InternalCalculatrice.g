/*
 * generated by Xtext 2.9.0
 */
grammar InternalCalculatrice;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.CalculatriceGrammarAccess;

}
@parser::members {
	private CalculatriceGrammarAccess grammarAccess;

	public void setGrammarAccess(CalculatriceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getFormuleAssignment()); }
		(rule__Model__FormuleAssignment)
		{ after(grammarAccess.getModelAccess().getFormuleAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormule
entryRuleFormule
:
{ before(grammarAccess.getFormuleRule()); }
	 ruleFormule
{ after(grammarAccess.getFormuleRule()); } 
	 EOF 
;

// Rule Formule
ruleFormule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormuleAccess().getGroup()); }
		(rule__Formule__Group__0)
		{ after(grammarAccess.getFormuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpr
entryRuleExpr
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprAccess().getGroup()); }
		(rule__Expr__Group__0)?
		{ after(grammarAccess.getExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerme
entryRuleTerme
:
{ before(grammarAccess.getTermeRule()); }
	 ruleTerme
{ after(grammarAccess.getTermeRule()); } 
	 EOF 
;

// Rule Terme
ruleTerme 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermeAccess().getGroup()); }
		(rule__Terme__Group__0)
		{ after(grammarAccess.getTermeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTermep
entryRuleTermep
:
{ before(grammarAccess.getTermepRule()); }
	 ruleTermep
{ after(grammarAccess.getTermepRule()); } 
	 EOF 
;

// Rule Termep
ruleTermep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermepAccess().getGroup()); }
		(rule__Termep__Group__0)?
		{ after(grammarAccess.getTermepAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFacteur
entryRuleFacteur
:
{ before(grammarAccess.getFacteurRule()); }
	 ruleFacteur
{ after(grammarAccess.getFacteurRule()); } 
	 EOF 
;

// Rule Facteur
ruleFacteur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFacteurAccess().getAlternatives()); }
		(rule__Facteur__Alternatives)
		{ after(grammarAccess.getFacteurAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprAccess().getPlusSignKeyword_0_0()); }
		'+'
		{ after(grammarAccess.getExprAccess().getPlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprAccess().getHyphenMinusKeyword_0_1()); }
		'-'
		{ after(grammarAccess.getExprAccess().getHyphenMinusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Termep__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermepAccess().getAsteriskKeyword_0_0()); }
		'*'
		{ after(grammarAccess.getTermepAccess().getAsteriskKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermepAccess().getSolidusKeyword_0_1()); }
		'/'
		{ after(grammarAccess.getTermepAccess().getSolidusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Facteur__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFacteurAccess().getGroup_0()); }
		(rule__Facteur__Group_0__0)
		{ after(grammarAccess.getFacteurAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFacteurAccess().getEntierTerminalRuleCall_1()); }
		RULE_ENTIER
		{ after(grammarAccess.getFacteurAccess().getEntierTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formule__Group__0__Impl
	rule__Formule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormuleAccess().getTermeParserRuleCall_0()); }
	ruleTerme
	{ after(grammarAccess.getFormuleAccess().getTermeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormuleAccess().getExprParserRuleCall_1()); }
	ruleExpr
	{ after(grammarAccess.getFormuleAccess().getExprParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expr__Group__0__Impl
	rule__Expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAccess().getAlternatives_0()); }
	(rule__Expr__Alternatives_0)
	{ after(grammarAccess.getExprAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expr__Group__1__Impl
	rule__Expr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAccess().getTermeParserRuleCall_1()); }
	ruleTerme
	{ after(grammarAccess.getExprAccess().getTermeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAccess().getExprParserRuleCall_2()); }
	ruleExpr
	{ after(grammarAccess.getExprAccess().getExprParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terme__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terme__Group__0__Impl
	rule__Terme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermeAccess().getFacteurParserRuleCall_0()); }
	ruleFacteur
	{ after(grammarAccess.getTermeAccess().getFacteurParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terme__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terme__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermeAccess().getTermepParserRuleCall_1()); }
	ruleTermep
	{ after(grammarAccess.getTermeAccess().getTermepParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Termep__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Termep__Group__0__Impl
	rule__Termep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Termep__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermepAccess().getAlternatives_0()); }
	(rule__Termep__Alternatives_0)
	{ after(grammarAccess.getTermepAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Termep__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Termep__Group__1__Impl
	rule__Termep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Termep__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermepAccess().getFacteurParserRuleCall_1()); }
	ruleFacteur
	{ after(grammarAccess.getTermepAccess().getFacteurParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Termep__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Termep__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Termep__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermepAccess().getTermepParserRuleCall_2()); }
	ruleTermep
	{ after(grammarAccess.getTermepAccess().getTermepParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Facteur__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Facteur__Group_0__0__Impl
	rule__Facteur__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Facteur__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFacteurAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getFacteurAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Facteur__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Facteur__Group_0__1__Impl
	rule__Facteur__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Facteur__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFacteurAccess().getFormuleParserRuleCall_0_1()); }
	ruleFormule
	{ after(grammarAccess.getFacteurAccess().getFormuleParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Facteur__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Facteur__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Facteur__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFacteurAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getFacteurAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__FormuleAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFormuleFormuleParserRuleCall_0()); }
		ruleFormule
		{ after(grammarAccess.getModelAccess().getFormuleFormuleParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ENTIER : '-'? RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
