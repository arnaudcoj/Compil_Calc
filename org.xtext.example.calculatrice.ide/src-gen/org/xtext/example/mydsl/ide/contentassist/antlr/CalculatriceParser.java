/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalCalculatriceParser;
import org.xtext.example.mydsl.services.CalculatriceGrammarAccess;

public class CalculatriceParser extends AbstractContentAssistParser {

	@Inject
	private CalculatriceGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCalculatriceParser createParser() {
		InternalCalculatriceParser result = new InternalCalculatriceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExprAccess().getAlternatives_0(), "rule__Expr__Alternatives_0");
					put(grammarAccess.getTermepAccess().getAlternatives_0(), "rule__Termep__Alternatives_0");
					put(grammarAccess.getFacteurAccess().getAlternatives(), "rule__Facteur__Alternatives");
					put(grammarAccess.getFormuleAccess().getGroup(), "rule__Formule__Group__0");
					put(grammarAccess.getExprAccess().getGroup(), "rule__Expr__Group__0");
					put(grammarAccess.getTermeAccess().getGroup(), "rule__Terme__Group__0");
					put(grammarAccess.getTermepAccess().getGroup(), "rule__Termep__Group__0");
					put(grammarAccess.getFacteurAccess().getGroup_0(), "rule__Facteur__Group_0__0");
					put(grammarAccess.getModelAccess().getFormuleAssignment(), "rule__Model__FormuleAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalCalculatriceParser typedParser = (InternalCalculatriceParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CalculatriceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CalculatriceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
