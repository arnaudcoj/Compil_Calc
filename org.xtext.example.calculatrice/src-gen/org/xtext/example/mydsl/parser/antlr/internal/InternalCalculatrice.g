/*
 * generated by Xtext 2.9.0
 */
grammar InternalCalculatrice;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.CalculatriceGrammarAccess;

}

@parser::members {

 	private CalculatriceGrammarAccess grammarAccess;

    public InternalCalculatriceParser(TokenStream input, CalculatriceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Calculatrice";
   	}

   	@Override
   	protected CalculatriceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCalculatrice
entryRuleCalculatrice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculatriceRule()); }
	iv_ruleCalculatrice=ruleCalculatrice
	{ $current=$iv_ruleCalculatrice.current; }
	EOF;

// Rule Calculatrice
ruleCalculatrice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCalculatriceAccess().getCalculsCalcParserRuleCall_0_0());
				}
				lv_calculs_0_0=ruleCalc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCalculatriceRule());
					}
					add(
						$current,
						"calculs",
						lv_calculs_0_0,
						"org.xtext.example.mydsl.Calculatrice.Calc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='\n'
		{
			newLeafNode(otherlv_1, grammarAccess.getCalculatriceAccess().getControl000aKeyword_1());
		}
	)*
;

// Entry rule entryRuleCalc
entryRuleCalc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalcRule()); }
	iv_ruleCalc=ruleCalc
	{ $current=$iv_ruleCalc.current; }
	EOF;

// Rule Calc
ruleCalc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='bool'
			{
				newLeafNode(otherlv_0, grammarAccess.getCalcAccess().getBoolKeyword_0_0());
			}
			(
				(
					lv_boolName_1_0=RULE_ID
					{
						newLeafNode(lv_boolName_1_0, grammarAccess.getCalcAccess().getBoolNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCalcRule());
						}
						setWithLastConsumed(
							$current,
							"boolName",
							lv_boolName_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getCalcAccess().getEqualsSignKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCalcAccess().getBBoolExprParserRuleCall_0_3_0());
					}
					lv_b_3_0=ruleBoolExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCalcRule());
						}
						set(
							$current,
							"b",
							lv_b_3_0,
							"org.xtext.example.mydsl.Calculatrice.BoolExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getCalcAccess().getConditionParserRuleCall_1());
		}
		this_Condition_4=ruleCondition
		{
			$current = $this_Condition_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					(
						lv_decl_5_0='var'
						{
							newLeafNode(lv_decl_5_0, grammarAccess.getCalcAccess().getDeclVarKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCalcRule());
							}
							setWithLastConsumed($current, "decl", true, "var");
						}
					)
				)?
				(
					(
						lv_varName_6_0=RULE_ID
						{
							newLeafNode(lv_varName_6_0, grammarAccess.getCalcAccess().getVarNameIDTerminalRuleCall_2_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCalcRule());
							}
							setWithLastConsumed(
								$current,
								"varName",
								lv_varName_6_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				otherlv_7='='
				{
					newLeafNode(otherlv_7, grammarAccess.getCalcAccess().getEqualsSignKeyword_2_0_2());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getCalcAccess().getECalcExprParserRuleCall_2_1_0());
					}
					lv_e_8_0=ruleCalcExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCalcRule());
						}
						set(
							$current,
							"e",
							lv_e_8_0,
							"org.xtext.example.mydsl.Calculatrice.CalcExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCalcExpr
entryRuleCalcExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalcExprRule()); }
	iv_ruleCalcExpr=ruleCalcExpr
	{ $current=$iv_ruleCalcExpr.current; }
	EOF;

// Rule CalcExpr
ruleCalcExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCalcExprAccess().getTermParserRuleCall_0());
		}
		this_Term_0=ruleTerm
		{
			$current = $this_Term_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCalcExprAccess().getCalcExprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='+'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getCalcExprAccess().getOpPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCalcExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='-'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getCalcExprAccess().getOpHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCalcExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCalcExprAccess().getRightCalcExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleCalcExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCalcExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Calculatrice.CalcExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0());
		}
		this_Factor_0=ruleFactor
		{
			$current = $this_Factor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getTermAccess().getCalcExprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='*'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getTermAccess().getOpAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTermRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='/'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getTermAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTermRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getRightTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Calculatrice.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current; }
	EOF;

// Rule Factor
ruleFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getFactorAccess().getCalcExprParserRuleCall_0_1());
			}
			this_CalcExpr_1=ruleCalcExpr
			{
				$current = $this_CalcExpr_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getFactorAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getNumberAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_neg_4_0='-'
					{
						newLeafNode(lv_neg_4_0, grammarAccess.getFactorAccess().getNegHyphenMinusKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFactorRule());
						}
						setWithLastConsumed($current, "neg", true, "-");
					}
				)
			)?
			(
				(
					lv_value_5_0=RULE_INT
					{
						newLeafNode(lv_value_5_0, grammarAccess.getFactorAccess().getValueINTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFactorRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getVarCallAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_varCall_7_0=RULE_ID
					{
						newLeafNode(lv_varCall_7_0, grammarAccess.getFactorAccess().getVarCallIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFactorRule());
						}
						setWithLastConsumed(
							$current,
							"varCall",
							lv_varCall_7_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getIfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getConditionAccess().getBoolExprParserRuleCall_1());
		}
		this_BoolExpr_1=ruleBoolExpr
		{
			$current = $this_BoolExpr_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getThenBlockCalcParserRuleCall_3_0());
				}
				lv_thenBlock_3_0=ruleCalc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"thenBlock",
						lv_thenBlock_3_0,
						"org.xtext.example.mydsl.Calculatrice.Calc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='else'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionAccess().getElseKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getElseBlockCalcParserRuleCall_4_1_0());
					}
					lv_elseBlock_5_0=ruleCalc
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"elseBlock",
							lv_elseBlock_5_0,
							"org.xtext.example.mydsl.Calculatrice.Calc");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getConditionAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleBoolExpr
entryRuleBoolExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolExprRule()); }
	iv_ruleBoolExpr=ruleBoolExpr
	{ $current=$iv_ruleBoolExpr.current; }
	EOF;

// Rule BoolExpr
ruleBoolExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolExprAccess().getBoolParserRuleCall_0());
		}
		this_Bool_0=ruleBool
		{
			$current = $this_Bool_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBoolExprAccess().getBoolExprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='&&'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getBoolExprAccess().getOpAmpersandAmpersandKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoolExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='||'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getBoolExprAccess().getOpVerticalLineVerticalLineKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoolExprRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolExprAccess().getRightBoolExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBoolExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Calculatrice.BoolExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBool
entryRuleBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	iv_ruleBool=ruleBool
	{ $current=$iv_ruleBool.current; }
	EOF;

// Rule Bool
ruleBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getBoolAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getBoolAccess().getBoolExprParserRuleCall_0_1());
			}
			this_BoolExpr_1=ruleBoolExpr
			{
				$current = $this_BoolExpr_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getBoolAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBoolAccess().getBooleanAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_BoolValue_4_1='true'
						{
							newLeafNode(lv_BoolValue_4_1, grammarAccess.getBoolAccess().getBoolValueTrueKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoolRule());
							}
							setWithLastConsumed($current, "BoolValue", lv_BoolValue_4_1, null);
						}
						    |
						lv_BoolValue_4_2='false'
						{
							newLeafNode(lv_BoolValue_4_2, grammarAccess.getBoolAccess().getBoolValueFalseKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoolRule());
							}
							setWithLastConsumed($current, "BoolValue", lv_BoolValue_4_2, null);
						}
					)
				)
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
