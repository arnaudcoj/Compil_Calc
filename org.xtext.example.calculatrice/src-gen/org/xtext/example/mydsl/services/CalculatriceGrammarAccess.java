/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CalculatriceGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Calculatrice.Model");
		private final Assignment cFormuleAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFormuleFormuleParserRuleCall_0 = (RuleCall)cFormuleAssignment.eContents().get(0);
		
		//Model:
		//	formule+=Formule;
		@Override public ParserRule getRule() { return rule; }
		
		//formule+=Formule
		public Assignment getFormuleAssignment() { return cFormuleAssignment; }
		
		//Formule
		public RuleCall getFormuleFormuleParserRuleCall_0() { return cFormuleFormuleParserRuleCall_0; }
	}
	public class FormuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Calculatrice.Formule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Formule:
		//	Terme Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//Terme Expr
		public Group getGroup() { return cGroup; }
		
		//Terme
		public RuleCall getTermeParserRuleCall_0() { return cTermeParserRuleCall_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Calculatrice.Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cTermeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Expr:
		//	(('+' | '-') Terme Expr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(('+' | '-') Terme Expr)?
		public Group getGroup() { return cGroup; }
		
		//('+' | '-')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//Terme
		public RuleCall getTermeParserRuleCall_1() { return cTermeParserRuleCall_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
	}
	public class TermeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Calculatrice.Terme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFacteurParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTermepParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Terme:
		//	Facteur Termep;
		@Override public ParserRule getRule() { return rule; }
		
		//Facteur Termep
		public Group getGroup() { return cGroup; }
		
		//Facteur
		public RuleCall getFacteurParserRuleCall_0() { return cFacteurParserRuleCall_0; }
		
		//Termep
		public RuleCall getTermepParserRuleCall_1() { return cTermepParserRuleCall_1; }
	}
	public class TermepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Calculatrice.Termep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSolidusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cFacteurParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTermepParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Termep:
		//	(('*' | '/') Facteur Termep)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(('*' | '/') Facteur Termep)?
		public Group getGroup() { return cGroup; }
		
		//('*' | '/')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_0() { return cAsteriskKeyword_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_0_1() { return cSolidusKeyword_0_1; }
		
		//Facteur
		public RuleCall getFacteurParserRuleCall_1() { return cFacteurParserRuleCall_1; }
		
		//Termep
		public RuleCall getTermepParserRuleCall_2() { return cTermepParserRuleCall_2; }
	}
	public class FacteurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Calculatrice.Facteur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cFormuleParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cEntierTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Facteur:
		//	'(' Formule ')'
		//	| Entier;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Formule ')' | Entier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Formule ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Formule
		public RuleCall getFormuleParserRuleCall_0_1() { return cFormuleParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Entier
		public RuleCall getEntierTerminalRuleCall_1() { return cEntierTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final FormuleElements pFormule;
	private final ExprElements pExpr;
	private final TermeElements pTerme;
	private final TermepElements pTermep;
	private final FacteurElements pFacteur;
	private final TerminalRule tEntier;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CalculatriceGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFormule = new FormuleElements();
		this.pExpr = new ExprElements();
		this.pTerme = new TermeElements();
		this.pTermep = new TermepElements();
		this.pFacteur = new FacteurElements();
		this.tEntier = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Calculatrice.Entier");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Calculatrice".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	formule+=Formule;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Formule:
	//	Terme Expr;
	public FormuleElements getFormuleAccess() {
		return pFormule;
	}
	
	public ParserRule getFormuleRule() {
		return getFormuleAccess().getRule();
	}
	
	//Expr:
	//	(('+' | '-') Terme Expr)?;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//Terme:
	//	Facteur Termep;
	public TermeElements getTermeAccess() {
		return pTerme;
	}
	
	public ParserRule getTermeRule() {
		return getTermeAccess().getRule();
	}
	
	//Termep:
	//	(('*' | '/') Facteur Termep)?;
	public TermepElements getTermepAccess() {
		return pTermep;
	}
	
	public ParserRule getTermepRule() {
		return getTermepAccess().getRule();
	}
	
	//Facteur:
	//	'(' Formule ')'
	//	| Entier;
	public FacteurElements getFacteurAccess() {
		return pFacteur;
	}
	
	public ParserRule getFacteurRule() {
		return getFacteurAccess().getRule();
	}
	
	//terminal Entier:
	//	'-'? INT;
	public TerminalRule getEntierRule() {
		return tEntier;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
