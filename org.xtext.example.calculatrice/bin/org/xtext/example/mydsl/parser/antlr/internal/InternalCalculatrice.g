/*
 * generated by Xtext 2.9.0
 */
grammar InternalCalculatrice;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.CalculatriceGrammarAccess;

}

@parser::members {

 	private CalculatriceGrammarAccess grammarAccess;

    public InternalCalculatriceParser(TokenStream input, CalculatriceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CalculatriceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getFormuleFormuleParserRuleCall_0());
			}
			lv_formule_0_0=ruleFormule
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"formule",
					lv_formule_0_0,
					"org.xtext.example.mydsl.Calculatrice.Formule");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleFormule
entryRuleFormule returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFormuleRule()); }
	iv_ruleFormule=ruleFormule
	{ $current=$iv_ruleFormule.current.getText(); }
	EOF;

// Rule Formule
ruleFormule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFormuleAccess().getTermeParserRuleCall_0());
		}
		this_Terme_0=ruleTerme
		{
			$current.merge(this_Terme_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getFormuleAccess().getExprParserRuleCall_1());
		}
		this_Expr_1=ruleExpr
		{
			$current.merge(this_Expr_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current.getText(); }
	EOF;

// Rule Expr
ruleExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprAccess().getPlusSignKeyword_0_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprAccess().getHyphenMinusKeyword_0_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getExprAccess().getTermeParserRuleCall_1());
		}
		this_Terme_2=ruleTerme
		{
			$current.merge(this_Terme_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getExprAccess().getExprParserRuleCall_2());
		}
		this_Expr_3=ruleExpr
		{
			$current.merge(this_Expr_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleTerme
entryRuleTerme returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTermeRule()); }
	iv_ruleTerme=ruleTerme
	{ $current=$iv_ruleTerme.current.getText(); }
	EOF;

// Rule Terme
ruleTerme returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermeAccess().getFacteurParserRuleCall_0());
		}
		this_Facteur_0=ruleFacteur
		{
			$current.merge(this_Facteur_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getTermeAccess().getTermepParserRuleCall_1());
		}
		this_Termep_1=ruleTermep
		{
			$current.merge(this_Termep_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTermep
entryRuleTermep returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTermepRule()); }
	iv_ruleTermep=ruleTermep
	{ $current=$iv_ruleTermep.current.getText(); }
	EOF;

// Rule Termep
ruleTermep returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTermepAccess().getAsteriskKeyword_0_0());
			}
			    |
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTermepAccess().getSolidusKeyword_0_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getTermepAccess().getFacteurParserRuleCall_1());
		}
		this_Facteur_2=ruleFacteur
		{
			$current.merge(this_Facteur_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getTermepAccess().getTermepParserRuleCall_2());
		}
		this_Termep_3=ruleTermep
		{
			$current.merge(this_Termep_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleFacteur
entryRuleFacteur returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFacteurRule()); }
	iv_ruleFacteur=ruleFacteur
	{ $current=$iv_ruleFacteur.current.getText(); }
	EOF;

// Rule Facteur
ruleFacteur returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFacteurAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getFacteurAccess().getFormuleParserRuleCall_0_1());
			}
			this_Formule_1=ruleFormule
			{
				$current.merge(this_Formule_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFacteurAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		this_Entier_3=RULE_ENTIER
		{
			$current.merge(this_Entier_3);
		}
		{
			newLeafNode(this_Entier_3, grammarAccess.getFacteurAccess().getEntierTerminalRuleCall_1());
		}
	)
;

RULE_ENTIER : '-'? RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
